{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: A Heat Diffusion-based Ricci Curvature and Applications to GNNs\n",
        "author:\n",
        "  - name: Kincaid MacDonald\n",
        "    orcid: 0000-0002-0760-5497\n",
        "    corresponding: true\n",
        "    email: kincaid@aya.yale.edu\n",
        "    roles: []\n",
        "    affiliations:\n",
        "    - Yale\n",
        "  - name: Dhananjay Bhaskar\n",
        "    orcid: 0000-0002-7859-8394\n",
        "    corresponding: false\n",
        "    roles: []\n",
        "    affiliations: \n",
        "    - MILA\n",
        "  - name: Kaly Zhang\n",
        "    orcid: 0000-0002-7859-8394\n",
        "    corresponding: false\n",
        "    roles: []\n",
        "    affiliations: \n",
        "    - MILA\n",
        "  - name: Xingzhi Sun\n",
        "    orcid: 0000-0002-7859-8394\n",
        "    corresponding: false\n",
        "    roles: []\n",
        "    affiliations: \n",
        "    - Yale\n",
        "  - name: Ian Adelstein\n",
        "    orcid: 0000-0002-7859-8394\n",
        "    corresponding: false\n",
        "    roles: []\n",
        "    affiliations:\n",
        "    - Yale Department of Math\n",
        "  - name: Smita Krishnaswamy\n",
        "    orcid: 0000-0002-7859-8394\n",
        "    corresponding: false\n",
        "    roles: []\n",
        "    affiliations:\n",
        "    - Yale Department of Applied Math\n",
        "    - Yale School of Medicine\n",
        "keywords:\n",
        "    - Manifold Learning\n",
        "    - Geometric Deep Learning\n",
        "    - Graph Curvature\n",
        "    - Point Clouds\n",
        "abstract: \n",
        "    For a number of years now work has been proceeding in order to bring to perfection the crudely conceived idea of a machine that would not only supply inverse reactive current for use in unilateral phase detractors, but would also be capable of automatically synchronizing cardinal grammeters. Such a machine is the \"Turbo-Encabulator.\"\n",
        "plain-language-summary: |\n",
        "    We introduce Diffusion Curvature, a fast, differentiable, noise-robust pointwise curvature for graphs and point clouds.\n",
        "key-points: []\n",
        "date: last-modified\n",
        "bibliography: references.bib\n",
        "citation:\n",
        "    container-title: IEEE TPAMI\n",
        "number-sections: true\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "Recent years have seen a growing appreciation that black-box machine learning methods can understand data better if equipped with geometric priors, both globally [cite TDA methods] and locally [cite heat & wave, energy]. This is especially true for graph-structured data. The graph manages to be the most general data structure only by ripping itself from the extrinsic context in which geometric measures like curvature are most easily derived. While pointclouds within ambient space can be viewed *extrinsically*, like an astronaut’s view of the Earth, the graph’s view of itself is solely *intrinsic*, like Poincare’s ant on a sphere.\n",
        "\n",
        "Though there exist purely intrinsic measures of geometry, they are (as intuition would suggest) more specialized and arcane then extrinsic measures, involving complex constructs like optimal transport and geodesics. The result: while point cloud-based neural networks (feedforward, CNNs, diffusion models) can easily by themselves infer geometry through their extrinsic view, GNNs are left with a much harder problem: deriving the complex machinery of, e.g., geodesics and Wasserstein distances from scratch.\n",
        "\n",
        "Here we present an alternative: a differentiable, scale-invariant, noise-resistant module that equips GNNs with graph curvatures.\n",
        "<!-- \n",
        "\n",
        "Recent years have seen a growing appreciation that black-box machine learning methods can understand data better if equipped with geometric priors, both globally [cite TDA methods] and locally [cite heat & wave, energy]. This is especially true for graph-structured data. The usefulness of graphs as a general data representation comes at a cost: that data is “ripped from its context”. To take an example, when point cloud data becomes a graph, the *extrinsic* geometric perspective afforded by a bird’s eye view of the points is reduced to an *intrinsic* perspective – the ‘ant’s eye’ view. \n",
        "\n",
        "Outline:\n",
        "-  -->\n",
        "\n",
        "\n",
        "# Diffusion Ricci Curvature\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "{{< embed ../nbs/experiments/2c3-are-kernels-zeitgeibers.ipynb#fig-spread-of-diffusion-2d >}}\n",
        "\n",
        "\n",
        "## Data & Methods {#sec-data-methods}\n"
      ],
      "id": "a27daf3c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: torus\n",
        "#| fig-cap: Diffusion Curvature vs Gaussian Curvature of the Torus\n",
        "#| fig-alt: The diffusion curvature corresponds closely to the gaussian curvature of the torus\n",
        "from diffusion_curvature.utils import plot_3d\n",
        "from diffusion_curvature.datasets import torus\n",
        "from diffusion_curvature.core import DiffusionCurvature, get_adaptive_graph\n",
        "X_torus, ks_torus = torus(2000)\n",
        "DC = DiffusionCurvature()\n",
        "G_torus = get_adaptive_graph(X_torus, k = 5, alpha = 1)\n",
        "ks_computed = DC.curvature(G_torus, dim=2, t = 25)\n",
        "plot_3d(X_torus, ks_computed, colorbar=True)"
      ],
      "id": "torus",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conclusion\n",
        "\n",
        "## References {.unnumbered}\n",
        "\n",
        "::: {#refs}\n",
        ":::"
      ],
      "id": "5e6dc307"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "diffcurvs",
      "language": "python",
      "display_name": "diffcurvs",
      "path": "/Users/boreas/Library/Jupyter/kernels/diffcurvs"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}